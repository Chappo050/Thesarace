#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("profile-blog:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//websocket stuff

const io = require("socket.io")(server, {
  cors: { origin: "*" },
});

//Rooms available

io.on("connection", (socket) => {
  console.log("a user connected");

  socket.on("join", function (username, roomName) {
    let rooms = io.sockets.adapter.rooms;
    let room = rooms.get(roomName);

    if (room == undefined) {
      socket.join(roomName);
      socket.emit("create", "New room created");
    } else if (room.size == 1) {
      socket.join(roomName);
      socket.emit("update", "Room Joined");
      //sends to all clients in said room
      socket.broadcast
        .to(roomName)
        .emit("update", "User connected to your room");

      //send game start message
      socket.emit("start");
      //sends to all clients in said room
      socket.broadcast.to(roomName).emit("start");
    } else {
      socket.emit("full", "full");
    }
    console.log(rooms);
  });

  socket.on("sendguess", function (data) {
    io.sockets.in(room).emit("update", socket.username, data);
  });

  socket.on("writing", function (data, room) {
    socket.broadcast.to(room).emit("writing", data);
    console.log(data);
  });

  socket.on("newWord", function (data, room) {
    socket.broadcast.to(room).emit("newWord", data);
  });

  socket.on("correctGuess", function (word, room) {
    socket.broadcast.to(room).emit("correctGuess", word);
  });

  socket.on("gameOver", function (room) {
    socket.broadcast.to(room).emit("gameOver");
  });

  socket.on("userDetails", function ( details, room) {
    console.log("the data of:......" + details + "to room" + room);
    socket.broadcast.to(room).emit("userDetails", details);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
